#!/usr/bin/env python3

import sys
import subprocess
import optparse
import tempfile
import os.path
import shutil
import shlex
import distutils.spawn

def runcmd(argv):
    proc = subprocess.Popen(argv, bufsize=1048576, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    o, e = proc.communicate()
    if proc.returncode != 0:
        print(e)
        sys.exit(proc.returncode)

if __name__ == '__main__':
    missing_req = False
    for executable in ['convert', 'ffmpeg']:
        if not distutils.spawn.find_executable(executable):
            sys.stderr.write('Cannot find executable %s which is needed in order for lapse to operate.' % executable)
            missing_req = True
    if missing_req:
        sys.exit(2)

    parser = optparse.OptionParser()
    parser.add_option('--input-pattern', dest='input_pattern', default=None, help="Pattern for files. Py integer format required.")
    parser.add_option('-n', dest='first_number', default='1', help="Number to start input files with. Use iwth --input-pattern.")
    parser.add_option('--stdin', action='store_true', dest='filelist_stdin', default=False)
    parser.add_option('--max-geometry', dest='max_geometry', default="1200x720")
    parser.add_option('--convert-args', dest='convert_args', default=None, help="Additional arguments to the ImageMagick convert (will be inserted before the resize to max geometry size")
    parser.add_option('-o', '--output-file', dest='output_file', help="Where to write mkv file.")
    (options, args) = parser.parse_args()

    input_pattern = options.input_pattern
    first_number = int(options.first_number)
    output_file = options.output_file
    max_geometry = options.max_geometry
    convert_args = []
    if options.convert_args is not None:
        convert_args = shlex.split(options.convert_args)
    temp_dir = tempfile.mkdtemp()

    file_names = []
    if input_pattern:
        number = first_number
        file_found = True
        while file_found:
            file_name = input_pattern % number
            file_found = os.path.isfile(file_name)
            if file_found:
                file_names.append(file_name)
            number += 1
    elif options.filelist_stdin:
        file_names = [fn for fn in sys.stdin.read().split('\n') if os.path.isfile(fn)]

    n_files = len(file_names)

    try:
        file_pat = 'frame%08d.jpg'

        def get_temp_frame_image_filename(number):
            return os.path.join(temp_dir, file_pat % number)
        ffmpeg_pat = os.path.join(temp_dir, file_pat)

        for number, file_name in enumerate(file_names):
            small_jpeg_file = get_temp_frame_image_filename(number)
            runcmd(['convert'] + convert_args + ['-geometry', max_geometry, '-quality', '95', file_name, small_jpeg_file])

            sys.stdout.write('.')
            if (number + 1) % 100 == 0:
                sys.stdout.write('%d/%d\n' % (number, n_files))
            sys.stdout.flush()

        runcmd(['ffmpeg', '-f', 'image2', '-start_number', '0', '-i', ffmpeg_pat, '-c:v', 'libx264', '-preset', 'slow', '-tune', 'stillimage', output_file])
    finally:
        shutil.rmtree(temp_dir)

