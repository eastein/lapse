#!/usr/bin/env python3

import sys
import subprocess
import optparse
import tempfile
import os.path
import os
import re
import shutil
import shlex
import glob
import distutils.spawn

def runcmd(argv):
    proc = subprocess.Popen(argv, bufsize=1048576, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    o, e = proc.communicate()
    if proc.returncode != 0:
        print(e)
        sys.exit(proc.returncode)

if __name__ == '__main__':
    missing_req = False
    for executable in ['convert', 'ffmpeg']:
        if not distutils.spawn.find_executable(executable):
            sys.stderr.write('Cannot find executable %s which is needed in order for lapse to operate.' % executable)
            missing_req = True
    if missing_req:
        sys.exit(2)

    parser = optparse.OptionParser()
    parser.add_option('--input-pattern', dest='input_pattern', default=None, help="Pattern for files. Py integer format required.")
    parser.add_option('--glob', action='store_true', dest='do_glob', default=False, help="If specified, do glob match for one file per output of the input pattern")
    parser.add_option('-n', dest='first_number', default='1', help="Number to start input files with. Use iwth --input-pattern.")
    parser.add_option('--stdin', action='store_true', dest='filelist_stdin', default=False)
    parser.add_option('--max-geometry', dest='max_geometry', default="1200x720")
    parser.add_option('--use-imagemagick', action='store_true', dest='use_imagemagick', default=False, help='Force downscaling to happen in ImageMagick')
    parser.add_option('-v', action='store_true', dest='verbose', default=False, help='Print more details about file scan step')
    parser.add_option('--convert-args', dest='convert_args', default=None, help="Additional arguments to the ImageMagick convert (will be inserted before the resize to max geometry size). This also causes the downscales to happen inside ImageMagick, which will typically be slower.")
    parser.add_option('-o', '--output-file', dest='output_file', help="Where to write mkv file.")
    (options, args) = parser.parse_args()

    input_pattern = options.input_pattern
    first_number = int(options.first_number)
    output_file = options.output_file
    be_verbose = options.verbose
    do_glob = options.do_glob

    use_imagemagick = options.use_imagemagick
    max_geometry_match = re.match('^([0-9]+)x([0-9]+)$', options.max_geometry)
    if not max_geometry_match:
        sys.stderr.write('Cannot understand --max-geometry option. Format: <width>x<height>.')
        sys.exit(2)
    max_geometry = tuple([int(v) for v in max_geometry_match.groups(0)])

    convert_args = []
    if options.convert_args is not None:
        convert_args = shlex.split(options.convert_args)
        # if we use --convert-args, using imagemagick is required
        use_imagemagick = True
    
    temp_dir = tempfile.mkdtemp()

    file_names = []
    if input_pattern:
        number = first_number
        file_found = True
        while file_found:
            file_name = input_pattern % number
            if do_glob:
               glob_file_names = glob.glob(file_name)
               if glob_file_names:
                   glob_file_names.sort()
                   file_name = glob_file_names[0]
                
            if be_verbose:
                print('checking for %s' % file_name)
            file_found = os.path.isfile(file_name)
            if file_found:
                if os.path.getsize(file_name) > 0:
                    if be_verbose:
                        print('  [+] found and contains data')
                    file_names.append(file_name)
                else:
                    if be_verbose:
                        print('  [-] found but empty')
            else:
                if be_verbose:
                    print('  [x] not found, stopping scan')
            number += 1
    elif options.filelist_stdin:
        file_names = [fn for fn in sys.stdin.read().split('\n') if os.path.isfile(fn)]

    n_files = len(file_names)

    try:
        file_pat = 'frame%08d.jpg'

        def get_temp_frame_image_filename(number):
            return os.path.join(temp_dir, file_pat % number)
        ffmpeg_pat = os.path.join(temp_dir, file_pat)

        for number, file_name in enumerate(file_names):
            small_jpeg_file = get_temp_frame_image_filename(number)
            if use_imagemagick:
                runcmd(['convert'] + convert_args + ['-geometry', '%dx%d' % max_geometry, '-quality', '100', file_name, small_jpeg_file])
            else:
                # it's not really being made small... rename var would be a good idea
                os.symlink(os.path.abspath(file_name), small_jpeg_file)

            sys.stdout.write('.')
            if (number + 1) % 100 == 0:
                sys.stdout.write('%d/%d\n' % (number, n_files))
            sys.stdout.flush()

        if use_imagemagick:
            # no args to add
            video_filter = []
        else:
            video_filter = ['-vf', 'scale=w=%d:h=%d:force_original_aspect_ratio=decrease' % max_geometry]

        ffmpeg_argv = ['ffmpeg', '-f', 'image2', '-start_number', '0', '-i', ffmpeg_pat] + video_filter + [ '-c:v', 'libx264', '-preset', 'slow', '-tune', 'stillimage', output_file]
        runcmd(ffmpeg_argv)
    finally:
        shutil.rmtree(temp_dir)

